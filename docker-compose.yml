services:
  backend:
    build: .
    working_dir: /app
    volumes:
      - .:/app  # ðŸ”¥ Monta il codice locale nel container
      - ./cache:/app/cache  # Volume per la persistenza dei dati
      - ./odbcinst.ini:/etc/odbcinst.ini  # Configurazione ODBC
      - ./odbc.ini:/etc/odbc.ini  # Configurazione ODBC
    ports:
      - "8000:8000"
    networks:
      - mynetwork
    environment:
      - PYTHONPATH=/app  # Assicura che i moduli possano essere importati
      - LOG_LEVEL=INFO  # Livello di logging configurabile
    command: ["uvicorn", "backend.app:app", "--host", "0.0.0.0", "--port", "8000"]

  frontend:
    build: .
    working_dir: /app
    volumes:
      - .:/app  # ðŸ”¥ Monta il codice locale nel container
      - frontend_data:/app/data  # Volume persistente per le credenziali
      - ./odbcinst.ini:/etc/odbcinst.ini  # Configurazione ODBC
      - ./odbc.ini:/etc/odbc.ini  # Configurazione ODBC
    ports:
      - "8501:8501"
    depends_on:
      - backend
    environment:
      - BACKEND_URL=http://backend:8000  # URL del backend per le richieste API
      - PYTHONPATH=/app  # Assicura che i moduli possano essere importati
    networks:
      - mynetwork
    command: ["streamlit", "run", "frontend/app.py", "--server.port=8501", "--server.address=0.0.0.0"]

networks:
  mynetwork:

volumes:
  frontend_data: